{:customREPLCommandSnippets
 [{:name "Add Libs (Sync w/aliases)"
   :key "a"
   :snippet (tap>
             ((requiring-resolve 'clojure.repl.deps/sync-deps)
              :aliases (read-string (str "[" (read-line) "]"))))}
  {:name "Run Current Test"
   :key "c"
   :snippet (binding [clojure.test/*test-out* *out*]
              (clojure.test/run-test $top-level-defined-symbol))}
  {:name "Tap Define Binding"
   :key "d"
   :snippet (tap> (def $selection))}
  {:name "Tap Last Exception"
   :key "e"
   :snippet (tap> (let [m (Throwable->map *e)]
                    (tap> ((requiring-resolve 'clojure.main/ex-triage) m))
                    m))}
  {:name "Tap Define to Input"
   :key "i"
   :snippet (tap> (let [v (read-string (read-line))]
                    (def $selection v)))}
  {:name "Portal Clear"
   :key "k"
   :snippet (do
              ((requiring-resolve 'portal.api/clear)
               @(requiring-resolve 'dev/portal))
              :portal.api/ignore)}
  {:name "Portal Lift Last Logged Value"
   :key "l"
   :snippet (tap> (:result (first @@(requiring-resolve 'dev/other-taps))))}
  {:name "Tap Namespace Publics"
   :key "n"
   :snippet (tap>
             (-> (find-ns '$ns)
                 (clojure.datafy/datafy)
                 :publics))}
  {:name "Portal Lift Last Output/Report"
   :key "o"
   :snippet (tap>
             (do
               (tap> (:stdio (first @@(requiring-resolve 'dev/other-taps))))
               (:report (first @@(requiring-resolve 'dev/other-taps)))))}
  {:name "Portal Start"
   :key "p"
   :snippet (do
              (ns dev
                (:require [clojure.java.shell :as sh]
                          [clojure.string :as str]))
              ;; we split Portal submissions into two streams:
              ;; * middleware and logging output (other-taps)
              ;; * everything else (my-taps)
              ;; this lets us focus commands on the "interesting"
              ;; values while still allowing for tracking of other
              ;; stuff happening in the app (logging) or repl (plain
              ;; logging)
              (defonce ^{:doc "Regular tap>'d values"}
                my-taps (atom (with-meta (list)
                                {:portal.viewer/default
                                 :portal.viewer/inspector})))
              (defonce ^{:doc "Logging and middleware tap>'d values"}
                other-taps (atom (with-meta (list)
                                   {:portal.viewer/default
                                    :portal.viewer/inspector})))
              (defn submit*
                "The reloadable implementation of submit."
                [v]
                (let [m (try (meta v) (catch Exception _))]
                  (if (or (:portal.nrepl/eval m)
                          (:dev.repl/logging m))
                    (when-not (clojure.string/starts-with? (str (:code v)) "(tap>")
                      (swap! other-taps conj v))
                    (swap! my-taps conj v))))
              (defonce ^{:doc "Fixed wrapper around submit*."}
                submit (fn [v] (submit* v)))
              (def ^{:doc "Atom for current regular value."}
                portal
                ((requiring-resolve 'portal.api/open)
                 {:launcher :vs-code
                  :portal.colors/theme :portal.colors/zerodark
                  :portal.launcher/window-title (System/getProperty "user.dir")
                  :value my-taps}))
              (def ^{:doc "Atom for other values."}
                portal-other
                ((requiring-resolve 'portal.api/open)
                 {:launcher :vs-code
                  :portal.colors/theme :portal.colors/material-ui
                  :portal.launcher/window-title "** logging **"
                  :value other-taps}))
              (add-tap submit))}
  {:name "Tap Input Code"
   :key "q"
   :snippet (tap> (let [v (read-string
                           (clojure.string/replace
                            (read-line)
                            "*v"
                            "(first @@(requiring-resolve 'dev/my-taps))"))]
                    (eval v)))}
  {:name "Run Rich Comment Tests"
   :key "r"
   :snippet (do
              (tap> "Testing Rich Comments in $ns...")
              (require '$ns)
              ((requiring-resolve 'com.mjdowney.rich-comment-tests/run-ns-tests!)
               '$ns))}
  {:name "Run Tests"
   :key "t"
   :snippet (do
              (tap> "Testing $ns... ")
              (require '$ns)
              (clojure.test/run-tests '$ns))}
  {:name "Run Tests For Source"
   :key "x"
   :snippet (some (fn [seg]
                    (let [nt (symbol (str "$ns-" seg))]
                      (when (try (require nt) true
                                 (catch Throwable _))
                        (tap> (str "Testing " nt "... "))
                        (clojure.test/run-tests nt))))
                  ["test" "expectations"])}
  {:name "Tap Namespace Cleanup"
   :key "z"
   :snippet (tap>
             (when-let [ns (find-ns '$ns)]
               (tap> "Removing $ns... ")
               (run! (fn [a]
                       (try (ns-unalias ns a)
                            (catch Throwable _)))
                     (keys (ns-aliases ns)))
               (run! (fn [i]
                       (try (ns-unmap ns i)
                            (catch Throwable _)))
                     (keys (ns-interns ns)))
               (->> (ns-refers ns)
                    (remove (fn [[_ v]]
                              (.startsWith (str v) "#'clojure.core/")))
                    (map key)
                    (run! (fn [r]
                            (try (ns-unmap ns r)
                                 (catch Throwable _)))))))}
  {:name "Portal Viewer"
   :key "0"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-next-viewer state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand First"
   :key "1"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Second"
   :key "2"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Third"
   :key "3"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Fourth"
   :key "4"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Fifth"
   :key "5"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Sixth"
   :key "6"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Seventh"
   :key "7"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Eighth"
   :key "8"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}
  {:name "Portal Expand Ninth"
   :key "9"
   :snippet (do
              ((requiring-resolve 'portal.api/eval-str)
               @(requiring-resolve 'dev/portal)
               (str
                '(let [state portal.ui.state/state]
                   (-> (portal.ui.commands/select-none state)
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/select-child state)))
                       (.then (fn [] (portal.ui.commands/toggle-expand state)))
                       (.then (fn [] (portal.ui.commands/select-none state)))))))
              :portal.api/ignore)}]}
